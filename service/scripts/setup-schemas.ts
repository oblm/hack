/**
 * One-time setup script to register Somnia schemas and generate IDs
 * Run this once, then copy the schema IDs to your .env file
 */

import { config } from 'dotenv';
import { SDK } from '@somnia-chain/streams';
import { createPublicClient, createWalletClient, http } from 'viem';
import { privateKeyToAccount } from 'viem/accounts';

// Load environment variables
config();

// Ledger schema: Complete state of all users as JSON string
// Format: { "0x123...": 42, "0x456...": 18 } (userId -> totalSeconds)
// Client subscribes to LedgerUpdated event, parses JSON, and finds their balance
const LEDGER_SCHEMA = 'string ledgerJson';

async function setupSchemas() {
  console.log('üîß Somnia Schema Setup\n');
  console.log('='.repeat(60));

  // Validate environment
  if (!process.env.SOMNIA_RPC_URL) {
    console.error('\n‚ùå SOMNIA_RPC_URL not found in .env');
    process.exit(1);
  }

  if (!process.env.PRIVATE_KEY) {
    console.error('\n‚ùå PRIVATE_KEY not found in .env');
    console.error('Run: npm run generate-wallet');
    process.exit(1);
  }

  try {
    // Set up wallet account
    const privateKey = process.env.PRIVATE_KEY;
    const account = privateKeyToAccount(`0x${privateKey}`);
    
    console.log(`\nüìã Wallet Address: ${account.address}`);
    console.log(`üåê RPC URL: ${process.env.SOMNIA_RPC_URL}`);

    // Create clients
    const publicClient = createPublicClient({
      transport: http(process.env.SOMNIA_RPC_URL),
    });

    const walletClient = createWalletClient({
      account,
      transport: http(process.env.SOMNIA_RPC_URL),
    })

    // Initialize SDK
    const sdk = new SDK({
      public: publicClient,
      wallet: walletClient,
    });

    console.log('\n‚úÖ Somnia SDK initialized');

    // Compute ledger schema ID
    console.log('\nüìù Computing Ledger Schema ID...');
    console.log(`   Schema: ${LEDGER_SCHEMA}`);
    console.log('   Structure: JSON string ledger + timestamp');
    
    const ledgerSchemaId = await sdk.streams.computeSchemaId(LEDGER_SCHEMA);
    
    if (!ledgerSchemaId) {
      throw new Error('Failed to compute ledger schema ID');
    }

    console.log(`   ‚úÖ Ledger Schema ID: ${ledgerSchemaId}`);

    // Register event schema for real-time reactivity
    console.log('\nüì° Registering event schema for real-time updates...');
    try {
      await sdk.streams.registerEventSchemas(
        ['LedgerUpdated'],
        [{
          params: [],
          eventTopic: 'LedgerUpdated()'
        }]
      );

      console.log('   ‚úÖ Event schema registered');
    } catch (error) {
      console.log('   ‚ÑπÔ∏è  Event schema may already be registered');
      console.log(`   ${error instanceof Error ? error.message : String(error)}`);
    }

    // Check if data schema is already registered
    console.log('\nüîç Checking if schema is already registered...');
    const isRegistered = await sdk.streams.isDataSchemaRegistered(ledgerSchemaId);
    
    if (isRegistered) {
      console.log('   ‚úÖ Schema is already registered on-chain');
    } else {
      console.log('   ‚ÑπÔ∏è  Schema not yet registered');
    }


    // Output results
    console.log(`\n${'='.repeat(60)}`);
    console.log('\n‚úÖ Setup Complete!\n');
    console.log('Add this to your service/.env file:\n');
    console.log('# Somnia Ledger Schema ID (generated by setup-schemas.ts)');
    console.log(`LEDGER_SCHEMA_ID=${ledgerSchemaId}`);
    console.log(`\n${'='.repeat(60)}`);
    console.log('\nYour updated .env should look like:');
    console.log('‚îÄ'.repeat(60));
    console.log('SOMNIA_RPC_URL=https://rpc.somnia.network');
    console.log('PRIVATE_KEY=your_private_key_here');
    console.log('CHAIN_ID=1');
    console.log(`LEDGER_SCHEMA_ID=${ledgerSchemaId}`);
    console.log('‚îÄ'.repeat(60));
    console.log('\nüìä Schema Structure:');
    console.log('   Data Schema: string ledgerJson');
    console.log('   Event Schema: LedgerUpdated(string ledgerJson)');
    console.log('');
    console.log('   How it works:');
    console.log('   1. Server publishes JSON ledger + emits LedgerUpdated event');
    console.log('   2. Client subscribes to LedgerUpdated event (zero-fetch pattern)');
    console.log('   3. Event contains full ledger data - no additional fetch needed');
    console.log('   4. Client parses JSON, finds their userId, calculates balance');
    console.log('   5. Real-time WebSocket updates - no polling required');
    console.log('\nNow you can start the service with: npm run dev\n');

  } catch (error) {
    console.error('\n‚ùå Setup failed:', error);
    process.exit(1);
  }
}

setupSchemas();

